@startuml BorisAccess
skinparam linetype ortho

namespace Diplomamunka {

class BorisController
{
    +<<property>> interval : int = 10
    +<<property>> portName : QString = ""
    +<<property>> input : quint16 = 0 {query}
    +<<property>> output : quint16 = 0
    +BorisController(parent : QObject* = nullptr)
    +BorisController(ioPort : IOPortPtr, timer : TimerPtr, parent : QObject* = nullptr)
    +~BorisController()
    +start() : bool
    +isActive() : bool {query}
    +stop() : void
    +getPortNames() : QStringList {query}
    +<<event>>errorOccurred(message : QString) : void
    -readInput() : void
    -writeOutput() : void
    -stopIfActive() : void
    -m_ioPort : IOPortPtr
    -m_timer : TimerPtr
    -m_isActive : bool = false
    -{static}<<constant>> ReadCommand : char = '\xb9'
    -{static}<<constant>> WriteCommand : char = '\xba'
}

QObject ()-- BorisController

abstract class Timer
{
    +Timer(parent : QObject* = nullptr)
    +{abstract}start(interval : int) : void
    +{abstract}isRunning() : bool {query}
    +{abstract}stop() : void
    +<<event>>elapsed() : void
}

QObject ()- Timer
BorisController o--> Timer

abstract class IOPort
{
    +IOPort(parent QObject* = nullptr)
    +{abstract}getPortNames() QStringList {query}
    +{abstract}open(portName : const QString&) : void
    +{abstract}isOpen() bool {query}
    +{abstract}close() : void
    +{abstract}read() : QByteArray
    +{abstract}write(data : const QByteArray&) : void
    +<<event>>dataReceived() : void
}

IOPort -() QObject
BorisController o--> IOPort

class CyclicTimer extends Timer
{
    +CyclicTimer(parent : QObject* = nullptr)
    +start(interval : int) : void
    +isRunning() : bool {query}
    +stop() : void
    +{static}create() : TimerPtr
    -verifyCanBeStarted(interval : int) : void
    -verifyStarted() : void
    -verifyCanBeStopped() : void
    -m_timerImpl : QTimer
    -{static}<<constant>> InvalidTimerId : int = -1
}

class SerialPort extends IOPort
{
    +SerialPort(parent : QObject* = nullptr)
    +getPortNames() : QStringList {query}
    +open(const QString& : void
    +isOpen() : bool {query}
    +close() : void
    +read() : QByteArray
    +write(const QByteArray& : void
    +{static}create() : IOPortPtr
    -verifyNoErrors() : void
    -m_portImpl : QSerialPort
}

abstract class DeveloperPort extends IOPort
{
    -{abstract}openPort(portName : const QString&) : void
    -{abstract}readData() : QByteArray
    -{abstract}writeData(data : const QByteArray&) : void
    +DeveloperPort(parent : QObject* = nullptr)
    +open(portName : const QString&) : void
    +isOpen() : bool {query}
    +close() : void
    +read() : QByteArray
    +write(const QByteArray& data) : void
    -m_isOpen : bool = false;
}

class EchoPort extends DeveloperPort
{
    +EchoPort(parent : QObject* = nullptr)
    +getPortNames() : QStringList {query}
    +{static}create() : IOPortPtr
    -openPort(portName : const QString&) : void
    -readData() : QByteArray
    -writeData(data : const QByteArray&) : void
    -storeData(data : const QByteArray&) : void
    -m_inverseMode : bool = false
    -m_data : quint16 = 0
    -{static}<<constant>>NormalEcho : char* = "ECHO (NORMAL)"
    -{static}<<constant>>InverseEcho : char* = "ECHO (INVERSE)"
}

class VirtualPort extends DeveloperPort
{
    +<<property>> data : quint16 = 0
    +VirtualPort(parent : QObject* = nullptr)
    +getPortNames() : QStringList {query}
    +{static}create() : IOPortPtr
    -openPort(portName : const QString&) : void
    -readData() : QByteArray
    -writeData(data : const QByteArray&) : void
    -{static}<<constant>>Port : char* = "VIRTUAL";
}

}

@enduml